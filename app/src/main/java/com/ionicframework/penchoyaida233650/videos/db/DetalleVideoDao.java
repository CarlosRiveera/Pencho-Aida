package com.ionicframework.penchoyaida233650.videos.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import com.ionicframework.penchoyaida233650.db.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table DETALLE_VIDEO.
*/
public class DetalleVideoDao extends AbstractDao<DetalleVideo, Long> {

    public static final String TABLENAME = "DETALLE_VIDEO";

    /**
     * Properties of entity DetalleVideo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Etag = new Property(1, String.class, "etag", false, "ETAG");
        public final static Property Kind = new Property(2, String.class, "kind", false, "KIND");
        public final static Property PublishedAt = new Property(3, String.class, "publishedAt", false, "PUBLISHED_AT");
        public final static Property ChannelId = new Property(4, String.class, "channelId", false, "CHANNEL_ID");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
        public final static Property DefaultImg = new Property(7, String.class, "defaultImg", false, "DEFAULT_IMG");
        public final static Property Medium = new Property(8, String.class, "medium", false, "MEDIUM");
        public final static Property High = new Property(9, String.class, "high", false, "HIGH");
        public final static Property ChannelTitle = new Property(10, String.class, "channelTitle", false, "CHANNEL_TITLE");
    };


    public DetalleVideoDao(DaoConfig config) {
        super(config);
    }
    
    public DetalleVideoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DETALLE_VIDEO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ETAG' TEXT," + // 1: etag
                "'KIND' TEXT," + // 2: kind
                "'PUBLISHED_AT' TEXT," + // 3: publishedAt
                "'CHANNEL_ID' TEXT," + // 4: channelId
                "'TITLE' TEXT," + // 5: title
                "'DESCRIPTION' TEXT," + // 6: description
                "'DEFAULT_IMG' TEXT," + // 7: defaultImg
                "'MEDIUM' TEXT," + // 8: medium
                "'HIGH' TEXT," + // 9: high
                "'CHANNEL_TITLE' TEXT);"); // 10: channelTitle
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DETALLE_VIDEO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DetalleVideo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String etag = entity.getEtag();
        if (etag != null) {
            stmt.bindString(2, etag);
        }
 
        String kind = entity.getKind();
        if (kind != null) {
            stmt.bindString(3, kind);
        }
 
        String publishedAt = entity.getPublishedAt();
        if (publishedAt != null) {
            stmt.bindString(4, publishedAt);
        }
 
        String channelId = entity.getChannelId();
        if (channelId != null) {
            stmt.bindString(5, channelId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        String defaultImg = entity.getDefaultImg();
        if (defaultImg != null) {
            stmt.bindString(8, defaultImg);
        }
 
        String medium = entity.getMedium();
        if (medium != null) {
            stmt.bindString(9, medium);
        }
 
        String high = entity.getHigh();
        if (high != null) {
            stmt.bindString(10, high);
        }
 
        String channelTitle = entity.getChannelTitle();
        if (channelTitle != null) {
            stmt.bindString(11, channelTitle);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DetalleVideo readEntity(Cursor cursor, int offset) {
        DetalleVideo entity = new DetalleVideo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // etag
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // kind
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // publishedAt
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // channelId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // description
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // defaultImg
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // medium
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // high
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // channelTitle
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DetalleVideo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEtag(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKind(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPublishedAt(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setChannelId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDefaultImg(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMedium(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setHigh(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setChannelTitle(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DetalleVideo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DetalleVideo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
