package com.ionicframework.penchoyaida233650.Fotos.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import com.ionicframework.penchoyaida233650.db.DaoSession;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table PHOTO_ALBUM.
*/
public class PhotoAlbumDao extends AbstractDao<PhotoAlbum, Long> {

    public static final String TABLENAME = "PHOTO_ALBUM";

    /**
     * Properties of entity PhotoAlbum.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdPhoto = new Property(1, String.class, "idPhoto", false, "ID_PHOTO");
        public final static Property Secret = new Property(2, String.class, "secret", false, "SECRET");
        public final static Property Server = new Property(3, String.class, "server", false, "SERVER");
        public final static Property Farm = new Property(4, String.class, "farm", false, "FARM");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property Ispublic = new Property(6, String.class, "ispublic", false, "ISPUBLIC");
        public final static Property IdAlbum = new Property(7, String.class, "idAlbum", false, "ID_ALBUM");
        public final static Property UrlImagenPhotoAlbum = new Property(8, String.class, "urlImagenPhotoAlbum", false, "URL_IMAGEN_PHOTO_ALBUM");
    };


    public PhotoAlbumDao(DaoConfig config) {
        super(config);
    }
    
    public PhotoAlbumDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PHOTO_ALBUM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ID_PHOTO' TEXT," + // 1: idPhoto
                "'SECRET' TEXT," + // 2: secret
                "'SERVER' TEXT," + // 3: server
                "'FARM' TEXT," + // 4: farm
                "'TITLE' TEXT," + // 5: title
                "'ISPUBLIC' TEXT," + // 6: ispublic
                "'ID_ALBUM' TEXT," + // 7: idAlbum
                "'URL_IMAGEN_PHOTO_ALBUM' TEXT);"); // 8: urlImagenPhotoAlbum
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PHOTO_ALBUM'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PhotoAlbum entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String idPhoto = entity.getIdPhoto();
        if (idPhoto != null) {
            stmt.bindString(2, idPhoto);
        }
 
        String secret = entity.getSecret();
        if (secret != null) {
            stmt.bindString(3, secret);
        }
 
        String server = entity.getServer();
        if (server != null) {
            stmt.bindString(4, server);
        }
 
        String farm = entity.getFarm();
        if (farm != null) {
            stmt.bindString(5, farm);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        String ispublic = entity.getIspublic();
        if (ispublic != null) {
            stmt.bindString(7, ispublic);
        }
 
        String idAlbum = entity.getIdAlbum();
        if (idAlbum != null) {
            stmt.bindString(8, idAlbum);
        }
 
        String urlImagenPhotoAlbum = entity.getUrlImagenPhotoAlbum();
        if (urlImagenPhotoAlbum != null) {
            stmt.bindString(9, urlImagenPhotoAlbum);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PhotoAlbum readEntity(Cursor cursor, int offset) {
        PhotoAlbum entity = new PhotoAlbum( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // idPhoto
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // secret
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // server
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // farm
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ispublic
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // idAlbum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // urlImagenPhotoAlbum
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PhotoAlbum entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdPhoto(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSecret(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setServer(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFarm(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIspublic(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIdAlbum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUrlImagenPhotoAlbum(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PhotoAlbum entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PhotoAlbum entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
